#+STARTUP:indent
#+HTML_HEAD: <link rel="stylesheet" type="text/css" href="css/styles.css"/>
#+HTML_HEAD_EXTRA: <link href='https://fonts.googleapis.com/css?family=Ubuntu+Mono|Ubuntu' rel='stylesheet' type='text/css'>
#+HTML_HEAD_EXTRA: <script src="https://ajax.googleapis.com/ajax/libs/jquery/1.9.1/jquery.min.js" type="text/javascript"></script>
#+HTML_HEAD_EXTRA: <script src="js/navbar.js" type="text/javascript"></script>
#+OPTIONS: f:nil author:nil num:nil creator:nil timestamp:nil toc:nil html-style:nil

#+TITLE: Pygame
#+AUTHOR: Oliver Drayton

#+BEGIN_HTML
  <div class="github-fork-ribbon-wrapper left">
    <div class="github-fork-ribbon">
      <a href="https://github.com/stsb11/9-CS-pyGame.git">Fork me on GitHub</a>
    </div>
  </div>
<div id="stickyribbon">
    <ul>
      <li><a href="1_Lesson.html">Week1</a></li>
      <li><a href="2_Lesson.html">Week2</a></li>
      <li><a href="3_Lesson.html">Week3</a></li>
      <li><a href="4_Lesson.html">Week4</a></li>
      <li><a href="5_Lesson.html">Week5</a></li>
      <li><a href="assessment.html">Assessment</a></li>
    </ul>
  </div>
#+END_HTML
* COMMENT Use as a template
:PROPERTIES:
:HTML_CONTAINER_CLASS: activity
:END:
** Learn It
:PROPERTIES:
:HTML_CONTAINER_CLASS: learn
:END:

** Research It
:PROPERTIES:
:HTML_CONTAINER_CLASS: research
:END:

** Design It
:PROPERTIES:
:HTML_CONTAINER_CLASS: design
:END:

** Build It
:PROPERTIES:
:HTML_CONTAINER_CLASS: build
:END:

** Test It
:PROPERTIES:
:HTML_CONTAINER_CLASS: test
:END:

** Run It
:PROPERTIES:
:HTML_CONTAINER_CLASS: run
:END:

** Document It
:PROPERTIES:
:HTML_CONTAINER_CLASS: document
:END:

** Code It
:PROPERTIES:
:HTML_CONTAINER_CLASS: code
:END:

** Program It
:PROPERTIES:
:HTML_CONTAINER_CLASS: program
:END:

** Try It
:PROPERTIES:
:HTML_CONTAINER_CLASS: try
:END:

** Badge It
:PROPERTIES:
:HTML_CONTAINER_CLASS: badge
:END:

** Save It
:PROPERTIES:
:HTML_CONTAINER_CLASS: save
:END:

* Introduction
:PROPERTIES:
:HTML_CONTAINER_CLASS: activity
:END:
** Learn It
:PROPERTIES:
:HTML_CONTAINER_CLASS: learn
:END:
- Pygame is a cross-platform set of Python modules designed for creating 2D games. The modules are designed to be simple, easy to use, and funâ€”a key part of Pygame's ideology.
- You can read more over at http://www.pygame.org/
- Pygame was first released in 2000 and has a large community of developers. Have a look at the [[http://www.pygame.org/hifi.html][Awesome]] section of the web site.  
- Pygame requires several line of code to get things up and running, this has been provided for you in the form of a template to use of all your pygame projects.
[[./img/1-1.png]]
** Code It: Template
:PROPERTIES:
:HTML_CONTAINER_CLASS: code
:END:
- Create a folder called =pygameIntro=.
- Create a new project using pycharm called =pygameCode= in the =pygameIntro= folder.
- Download the template *pygame* to your =pygameIntro= folder as =basicShapes.py=
[[./doc/pygameDevTemplate.py][Click here for the template]] 

- The template has two main sections:
  - Game Setup: runs once when the game loads
  - Game loop: runs again and again (loops) 60 times a second
- We'll start by making some changes to the game loop, to get to grips with drawing basic graphics. Once we're happy with doing this, we can start to animate them.
** Run It
:PROPERTIES:
:HTML_CONTAINER_CLASS: run
:END:
- With the template loaded in pyCharm, we need to test that everything is working. 
- Run the template file by either using =Shift-F10= or clicking the green 'play' icon in the top right-hand corner.
- After a few seconds, you should see the computer create a new window that is black, 1000 * 800 pixels and closes when you tell it to. 
** Learn It: Screen Geometry
:PROPERTIES:
:HTML_CONTAINER_CLASS: learn
:END:      
- Unlike Scratch, Pygame and most professional game engines have the origin =x = 0=, =y = 0= at the top left hand corner.
[[./img/1-2.png]]
- In the image above, a pixel has been placed at x=30, y=40.
** Program It
:PROPERTIES:
:HTML_CONTAINER_CLASS: program
:END:
- Pygame has several built-in shapes that you can draw using simple commands.
- The =.draw.rect()= command lets you draw a rectangle on the display. It needs a few pieces of information to be able to do this first, which are placed in brackets. We call these *parameters*. 
   - In theory you could have lots of graphics windows open. We've only got one, which we've called =screen=. We need to tell pyGame that this is where the shape is to be drawn.
   - We can draw lines and shapes in any of 16.7 million colours. Our code has a few set up for convenient access. In the example below, we're using a colour we've called =green=. 
- Next, there are four numbers. Let's look at that a little bit
   - We need to state exactly where on the =screen= windows we'd like to start drawing the rectangle from. The first two digits (50,200) tell pyGame that we want to start drawing 50 pixels from the left edge, and 200px from the top of the screen. 
   - To draw a rectangle, we also need to state the width (40px in this case) and the height (20px) that we want our shape to be. 
[[./img/1-rect.png]]
- We can draw several other basic shapes too, such as circles. 
- The idea is much the same, as you can see below.
[[./img/1-circle.png]]
- Lines are also possible...
[[./img/1-line.png]]

** Try It
:PROPERTIES:
:HTML_CONTAINER_CLASS: try
:END:
- In your pyCharm code, scroll down to line that says, =your code starts here=, located about two thirds of the way down the page. 
- Copy and paste the line below underneath this line
#+begin_src python
pygame.draw.rect(screen, green, (50, 200, 40, 20))
pygame.draw.rect(screen, yellow, (50, 400, 40, 20), 4)
#+end_src
- When done, your screen should look like this:
[[./img/1-3.PNG]]
- Run the code with =Shift-F10=
- What does the extra 4 at the end do?


- Let's try something else. Remove the lines you wrote previously, and replace them with these and run the program. 
#+begin_src python
pygame.draw.circle(screen, white, (300, 600), 20)
pygame.draw.circle(screen, yellow, (400, 700), 20, 4)
#+end_src
- Your code should look like this:
[[./img/1-4.PNG]]
- Let's try one more. Replace your circle code with these lines.
- Run them - what do you think the different parameters are doing?
#+begin_src python
pygame.draw.line(screen, green, (0, 0), (200, 200))
pygame.draw.line(screen, green, (0, 0), (800, 200), 4)
#+end_src
- Your code should look like this when you're done:
[[./img/1-5.PNG]]
** Badge It
:PROPERTIES:
:HTML_CONTAINER_CLASS: badge
:END:
- For these tasks, upload screenshots of your work as well as your .py code files to collect the badges.
- *Silver:* Draw a car or house using code. An example is shown below, made from two rectangles, two circles and a 4-pixel thick line. 
[[./img/1_car.png]]
- *Gold:* Add comments below your code from the silver task, explaining in your own words how [[http://www.rapidtables.com/web/color/RGB_Color.htm][RGB colours]] work.
- *Platinum:* Create some variables for *two* new colours. Pygame also has the shapes =ellipse= and =polygon=. Research online how to use these, then draw an example of them both using your new colours.
